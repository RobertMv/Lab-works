Module.createNamespace("interface.lang.ru");
Module.createNamespace("interface.lang.eng");
Module.registerInitializationFunction(initNamespaceRu);
Module.registerInitializationFunction(initNamespaceEng);
Module.registerInitializationFunction(init);
Module.runInitializationFunctions();
date();
session();
render();

function initNamespaceRu() {
  var nsRu = interface.lang.ru;
  nsRu.lang = function() {
    return "ru-Ru"
  }
  nsRu.task = function() {
    return "Задание ";
  }
  nsRu.before = function() {
    return "До сессии осталось: ";
  }
  nsRu.passed = function() {
    return "Уже прошло: ";
  }
  nsRu.result = function() {
    return "Результат: ";
  }
  nsRu.days = function() {
    return " дней";
  }
  nsRu.button = function() {
    return "Кнопка";
  }
  nsRu.element = function() {
    return "Элемент ";
  }
  nsRu.error = function() {
    return "Некоректный ввод";
  }
  nsRu.inputDate = function() {
    return "Введите дату в формате ГГГГ-ММ-ДД";
  }
  nsRu.date = function() {
    return "Введите строку с серией и номером паспорта";
  }
}

function initNamespaceEng() {
  var nsEng = interface.lang.eng;
  nsEng.lang = function() {
    return "en-Us";
  }
  nsEng.task = function() {
    return "Task ";
  }
  nsEng.before = function() {
    return "Before session: ";
  }
  nsEng.passed = function() {
    return "Already passed: ";
  }
  nsEng.result = function() {
    return "Result: ";
  }
  nsEng.days = function() {
    return " day's";
  }
  nsEng.button = function() {
    return "Button ";
  }
  nsEng.element = function() {
    return "Element ";
  }
  nsEng.error = function() {
    return "Incorrect input";
  }
  nsEng.inputDate = function() {
    return "Enter the date in the format YYYY-MM-DD";
  }
  nsEng.date = function() {
    return "Enter the string with passport number";
  }
}

function init() {
  interface.lang.current = interface.lang.ru;
}

function render() {
  var names = ["before", "passed", "days", "result", "task", "button", "element", "date"];
  for (var k in names) {
    var elem = document.getElementsByName(names[k]);
    for (var i in elem)
      elem[i].innerHTML = interface.lang.current[names[k]]();
  }
}


function langSwitch() {
  if (interface.lang.current == interface.lang.ru)
    interface.lang.current = interface.lang.eng;
  else
    interface.lang.current = interface.lang.ru;
  date();
  render();
}

function date() {
  var date = new Date();
  var day = document.getElementById("day");
  var month = document.getElementById("month");
  var year = document.getElementById("year");
  day.innerHTML =  date.toLocaleString(interface.lang.current.lang(), {weekday: 'long'});
  month.innerHTML = date.toLocaleString(interface.lang.current.lang(), {day: 'numeric', month: 'long', year: 'numeric'});
}

function session() {
  var date = new Date();
  var s = new Date(2019, 5, 16);
  date.setHours(0, 0, 0, 0);
  date = s - date;
  var session = document.getElementById("session");
  session.value = (date / 86400000 - 1);
}

function days() {
  var s = prompt(interface.lang.current.inputDate());
  s = Date.parse(s);
  var date = new Date();
  date.setHours(0, 0, 0, 0);
  date = date - s;
  var days = document.getElementById("days");
  days.value = (Math.floor(date / 86400000) + 1);
}

function sum() {
  var first = document.getElementById("first").value;
  var last = document.getElementById("last").value;
  if (isNaN(first) || isNaN(last) || first == "" || last == "" || first == null || last == null) {
    alert(interface.lang.current.error());
    return;
  }
  var r = 0;
  for (var i = Number(first); i <= Number(first) + Number(last); i++)
    r += (Math.pow((-1), (i - 1)) * Math.pow((i + 4), 2));
  sumresult.value = r;
}

function search() {
  var found = document.getElementById("found");
  var res = document.getElementById("res");
  res.innerHTML = " " + found.value.match(/\d{4}\s\d{6}/);
}

